{"title":"node.js+express搭建简单的web服务器","slug":"node-express-http-server","date":"2018-11-11T12:00:44.000Z","updated":"2018-11-12T00:26:40.524Z","comments":true,"path":"api/articles/node-express-http-server.json","photos":[],"link":"","excerpt":"前言&emsp;&emsp;有朋友问我关于nodejs搭建web服务器的问题，我对node的了解也不多，所以简单的学习了解一下，帮朋友解决了一些问题。&emsp;&emsp;首先，很多人都在问nodejs适不适合web服务器开发。这个问题知乎上面已经有很多解答了，比较详细点赞较多的一条：使用 Node.js 的优势和劣势都有哪些？ - FengqiAsia的回答 - 知乎，年代久远不知道是否适用。看了相关的介绍之后，我觉得nodejs是非常适合做web服务器的，网上大多的评价都是可靠性低，单进程、单线程，一个崩掉整个进程就崩掉之类的，异常难以定位。还有可能是从传统语言转过来写js的话，可能在一段时间内很难适应吧。&emsp;&emsp;看了下，linkedin、yahoo的服务器就是用node写的，还有之前去了解的unity-cache-server，说明node的优点是毋庸置疑的。可靠性低进程崩掉等缺点其实是都可以通过代码的健壮性来避免的(说着轻巧)，另外异常处理相关的也有很多库和进程管理程序监控node的运行。作者：尤雨溪链接：https://www.zhihu.com/question/20069184/answer/14385915来源：知乎异步的思维是js的特点，也是node高并发性能优势的原因之一，你从传统的同步语言过来可能不习惯，但是像我们这种从前端写js过来的人就自然得像说话一样，关键还是适应。熟悉之后可以用async，Promise系 (q, bluebird) 或者 eventproxy 之类的库来改善代码嵌套的问题。异常的问题 - Node 核心库的 API 抛异常大致有三种常见情况：<br>\\1. 异步回调。按惯例，接收的回调函数第一个参数都是可能出现的异常，没有特殊情况的话你应该把异常按照同样的参数位置一层层传下去，直到最顶层的回调里进行统一处理。<br>\\2. 同步版本的api会直接抛异常。所以如果确实无法避免抛错的可能，直接 try catch，要么就避免用同步版本。<br>\\3. Stream形态的API，必须在stream对象上添加 error 的侦听函数，不然异常会直接抛出。如果出现导致进程中断的异常，说明你的代码有逻辑层面的问题（以上几点没有完全做好），你应该在开发的时候发现并处理这些异常，而不是让它们在部署环境中发生。如果你实在避免不了问题发生，你可以用 Node 的 Domain API 来对整块代码的异常进行捕捉。<br>另外可以用进程管理工具比如 forever, pm2 或是 monit 监视应用进程，崩溃后自动重启。最后回到你的问题，node是否适合做web开发 - node的独特优势是高并发，高实时性，或者单页富前端的web应用，比如实时聊天，游戏，另外node也是写JSON API的最好选择。&emsp;&emsp;另外看到了一条关于node的应用场景的回答，比较赞同，找不到链接了。大概是说node的适合 io 密集型的应用，能发挥出很好的性能，而 cpu 密集型的应用可能性能就不是最佳选择。估计这就是unity官方选择nodejs来写cacheserver的原因吧。一个简单的web服务器&emsp;&emsp;这里用了nodejs的第三方库express，express也有自己的脚手架。新建一个文件夹http-server，cd到该目录下：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>touch app.js # 新建app.js文件<br># 然后一顿回车，使用默认就ok，不过author可以填上自己的名字。<br>package name: (http-server)<br>version: (1.0.0)<br>description:<br>entry point: (app.js)<br>test command:<br>git repository:<br>keywords:<br>author: wangx<br>license: (ISC)<br>About to write to /Users/wangx/work/nodejs/http-server/package.json:<br><br>&#123;<br>  \"name\": \"http-server\",<br>  \"version\": \"1.0.0\",<br>  \"description\": \"\",<br>  \"main\": \"app.js\",<br>  \"scripts\": &#123;<br>    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"<br>  &#125;,<br>  \"author\": \"wangx\",<br>  \"license\": \"ISC\"<br>&#125;<br># 初始化<br>npm init<br># 安装express<br>npm install express --save<br>&emsp;&emsp;然后就可以在app.js写相关逻辑：","covers":null,"content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;有朋友问我关于nodejs搭建web服务器的问题，我对node的了解也不多，所以简单的学习了解一下，帮朋友解决了一些问题。</p>\n<p>&emsp;&emsp;首先，很多人都在问nodejs适不适合web服务器开发。这个问题知乎上面已经有很多解答了，比较详细点赞较多的一条：<a href=\"https://www.zhihu.com/question/19653241/answer/15993549\" target=\"_blank\" rel=\"noopener\">使用 Node.js 的优势和劣势都有哪些？ - FengqiAsia的回答 - 知乎</a>，年代久远不知道是否适用。看了相关的介绍之后，我觉得nodejs是非常适合做web服务器的，网上大多的评价都是可靠性低，单进程、单线程，一个崩掉整个进程就崩掉之类的，异常难以定位。还有可能是从传统语言转过来写js的话，可能在一段时间内很难适应吧。</p>\n<p>&emsp;&emsp;看了下，linkedin、yahoo的服务器就是用node写的，还有之前去了解的unity-cache-server，说明node的优点是毋庸置疑的。可靠性低进程崩掉等缺点其实是都可以通过代码的健壮性来避免的(说着轻巧)，另外异常处理相关的也有很多库和进程管理程序监控node的运行。</p>\n<blockquote>\n<p>作者：尤雨溪</p>\n<p>链接：<a href=\"https://www.zhihu.com/question/20069184/answer/14385915\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20069184/answer/14385915</a></p>\n<p>来源：知乎</p>\n<p>异步的思维是js的特点，也是node高并发性能优势的原因之一，你从传统的同步语言过来可能不习惯，但是像我们这种从前端写js过来的人就自然得像说话一样，关键还是适应。熟悉之后可以用async，Promise系 (q, bluebird) 或者 eventproxy 之类的库来改善代码嵌套的问题。</p>\n<p>异常的问题 - Node 核心库的 API 抛异常大致有三种常见情况：<br>\\1. 异步回调。按惯例，接收的回调函数第一个参数都是可能出现的异常，没有特殊情况的话你应该把异常按照同样的参数位置一层层传下去，直到最顶层的回调里进行统一处理。<br>\\2. 同步版本的api会直接抛异常。所以如果确实无法避免抛错的可能，直接 try catch，要么就避免用同步版本。<br>\\3. Stream形态的API，必须在stream对象上添加 error 的侦听函数，不然异常会直接抛出。</p>\n<p>如果出现导致进程中断的异常，说明你的代码有逻辑层面的问题（以上几点没有完全做好），你应该在开发的时候发现并处理这些异常，而不是让它们在部署环境中发生。</p>\n<p>如果你实在避免不了问题发生，你可以用 Node 的 Domain API 来对整块代码的异常进行捕捉。<br>另外可以用进程管理工具比如 forever, pm2 或是 monit 监视应用进程，崩溃后自动重启。</p>\n<p>最后回到你的问题，node是否适合做web开发 - node的独特优势是高并发，高实时性，或者单页富前端的web应用，比如实时聊天，游戏，另外node也是写JSON API的最好选择。</p>\n</blockquote>\n<p>&emsp;&emsp;另外看到了一条关于node的应用场景的回答，比较赞同，找不到链接了。大概是说node的适合 io 密集型的应用，能发挥出很好的性能，而 cpu 密集型的应用可能性能就不是最佳选择。估计这就是unity官方选择nodejs来写cacheserver的原因吧。</p>\n<h4 id=\"一个简单的web服务器\"><a href=\"#一个简单的web服务器\" class=\"headerlink\" title=\"一个简单的web服务器\"></a>一个简单的web服务器</h4><p>&emsp;&emsp;这里用了nodejs的第三方库express，express也有自己的脚手架。新建一个文件夹<code>http-server</code>，cd到该目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch app.js # 新建app.js文件</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后一顿回车，使用默认就ok，不过author可以填上自己的名字。</span></span><br><span class=\"line\">package name: (http-server)</span><br><span class=\"line\">version: (1.0.0)</span><br><span class=\"line\">description:</span><br><span class=\"line\">entry point: (app.js)</span><br><span class=\"line\">test command:</span><br><span class=\"line\">git repository:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: wangx</span><br><span class=\"line\">license: (ISC)</span><br><span class=\"line\">About to write to /Users/wangx/work/nodejs/http-server/package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  \"name\": \"http-server\",</span><br><span class=\"line\">  \"version\": \"1.0.0\",</span><br><span class=\"line\">  \"description\": \"\",</span><br><span class=\"line\">  \"main\": \"app.js\",</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"author\": \"wangx\",</span><br><span class=\"line\">  \"license\": \"ISC\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化</span></span><br><span class=\"line\">npm init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装express</span></span><br><span class=\"line\">npm install express --save</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后就可以在app.js写相关逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * http服务器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  创建express服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get请求</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(request)</span></span><br><span class=\"line\">    response.send(<span class=\"string\">'get请求成功'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// post请求</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    response.send(<span class=\"string\">'post请求成功'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定监听端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">9001</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'server启动成功'</span>)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;try it，浏览器中输入<code>localhost:9001</code>就可以看到get请求成功了。简单的http服务是这样了。如果简单的写一个页面测试的话会有跨域问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>); </span><br><span class=\"line\">    res.header(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Content-Type,Content-Length, Authorization, Accept,X-Requested-With\"</span>);</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>,<span class=\"string\">\"PUT,POST,GET,DELETE,OPTIONS\"</span>);</span><br><span class=\"line\">    res.header(<span class=\"string\">\"X-Powered-By\"</span>,<span class=\"string\">' 3.2.1'</span>)</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Access-Control-Allow-Origin：允许的域，*为任意的域都可以访问</p>\n<p>Access-Control-Allow-Headers：允许的header类型</p>\n<p>Access-Control-Allow-Methods：允许的请求方法</p>\n</blockquote>\n<p>&emsp;&emsp;路由：针对不同的路由有不同的处理方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/home'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取数据'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    response.send(<span class=\"string\">'get请求成功'</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;get请求参数：request.query会把请求参数包装成字典对象，可通过点运算符获取请求参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/home'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(request.query.name);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    response.send(<span class=\"string\">`<span class=\"subst\">$&#123;request.query.name&#125;</span>请求成功`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">localhost:<span class=\"number\">9001</span>/home?name=wangx <span class=\"comment\">// wangx  wangx请求成功</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;中间件：发送一个请求给服务器的时候，会被中间件拦截，先由中间件处理，每个中间件都有一个回调函数作为参数，拦截到参数，就会自动执行回调函数。<em>有中间件，会先执行中间件的回调函数，然后才会调用get或者post的回调函数，也就是当监听到请求，先执行中间件，才会到get、post请求。</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 截取请求、拦截回调</span></span><br><span class=\"line\">server.use(<span class=\"string\">'/home'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'中间件'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(request.query.name)</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;post请求参数：nodejs需要使用body-parse解析post请求参数，采用中间件解析post请求参数。完整代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入 body-parse</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParse = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parse'</span>);</span><br><span class=\"line\"><span class=\"comment\">//  创建express服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">// 解析器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> urlencoded = bodyParse.urlencoded(&#123; <span class=\"attr\">extends</span>:<span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 中间件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> jsonParse = bodyParse.json();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过中间件处理，解析请求参数，存放在request.body中</span></span><br><span class=\"line\">server.use(<span class=\"string\">'./home'</span>, jsonParse);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理请求参数</span></span><br><span class=\"line\">app.post(<span class=\"string\">'./home'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(request.body);</span><br><span class=\"line\">    response.send(request.body);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决跨域</span></span><br><span class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Content-Type,Content-Length, Authorization, Accept,X-Requested-With\"</span>);</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>,<span class=\"string\">\"PUT,POST,GET,DELETE,OPTIONS\"</span>);</span><br><span class=\"line\">    res.header(<span class=\"string\">\"X-Powered-By\"</span>,<span class=\"string\">' 3.2.1'</span>)</span><br><span class=\"line\">    res.header(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定监听端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">9001</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'server启动成功'</span>)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;仅作为一个demo，关于node服务器的开发与设计，应该参考一下github上成熟的nodejs项目。</p>\n<p>&emsp;&emsp;<a href=\"https://github.com/bailicangdu/node-elm\" target=\"_blank\" rel=\"noopener\">基于nodejs+mongodb构建的饿了么后台系统</a>，这是一个比较好参考的项目，前后端分离，内容比较完整，可以作为学习参考。</p>\n","categories":[{"name":"nodejs","slug":"nodejs","count":1,"path":"api/categories/nodejs.json"}],"tags":[{"name":"nodejs","slug":"nodejs","count":1,"path":"api/tags/nodejs.json"},{"name":"express","slug":"express","count":1,"path":"api/tags/express.json"},{"name":"http_server","slug":"http-server","count":1,"path":"api/tags/http-server.json"}]}