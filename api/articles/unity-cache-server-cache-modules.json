{"title":"unity-cache-server-cache-modules","slug":"unity-cache-server-cache-modules","date":"2018-09-28T02:43:06.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/unity-cache-server-cache-modules.json","photos":[],"link":"","excerpt":"Cache Modules&emsp;&emsp;Unity-cache-server v6的缓存服务器支持两种缓存机制：cache_fs，基于文件系统的缓存完全内存（RAM）支持的缓存&emsp;&emsp;cache server默认使用cache_fs即文件系统缓存模式，适用于大多数的应用程序。RAM缓存模式提供最佳性能，但Server需要足够的物理RAM用于缓存，通常需要的内存大小至少为项目Library文件夹的2-3倍。&emsp;&emsp;两个模式的配置文件信息都在config/defalult.yml中进行配置。cache_fs&emsp;&emsp;一个简单且高效的文件系统缓存模式。用法--cache-module cache_fs命令","covers":null,"content":"<h2 id=\"Cache-Modules\"><a href=\"#Cache-Modules\" class=\"headerlink\" title=\"Cache Modules\"></a>Cache Modules</h2><p>&emsp;&emsp;Unity-cache-server v6的缓存服务器支持两种缓存机制：</p>\n<ul>\n<li>cache_fs，基于文件系统的缓存</li>\n<li>完全内存（RAM）支持的缓存</li>\n</ul>\n<p>&emsp;&emsp;cache server默认使用cache_fs即文件系统缓存模式，适用于大多数的应用程序。RAM缓存模式提供最佳性能，但Server需要足够的物理RAM用于缓存，通常需要的内存大小至少为项目Library文件夹的2-3倍。</p>\n<p>&emsp;&emsp;两个模式的配置文件信息都在config/defalult.yml中进行配置。</p>\n<h2 id=\"cache-fs\"><a href=\"#cache-fs\" class=\"headerlink\" title=\"cache_fs\"></a>cache_fs</h2><p>&emsp;&emsp;一个简单且高效的文件系统缓存模式。</p>\n<p><strong>用法</strong></p>\n<p><code>--cache-module cache_fs</code></p>\n<p><strong>命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">cachePath</td>\n<td style=\"text-align:center\"><code>.cache_fs</code></td>\n<td style=\"text-align:center\">缓存路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cleanupOptions.expireTimeSpan</td>\n<td style=\"text-align:center\"><code>P30D</code></td>\n<td style=\"text-align:center\"><a href=\"https://msdn.microsoft.com/en-us/library/se73z7b9(v=vs.110\" target=\"_blank\" rel=\"noopener\">ASP.NET</a>.aspx)或<a href=\"https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\" target=\"_blank\" rel=\"noopener\">IOS 8601</a>格式时间跨度。在此时间范围内没有访问过的缓存文件会被清理。相关次序时间语法的更多信息，请参阅<a href=\"https://momentjs.com/docs/#/durations/\" target=\"_blank\" rel=\"noopener\">Moment.js</a>文档。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cleanupOptions.maxCacheSize</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">磁盘缓存的最大size(以字节为单位)。使磁盘利用率低于该阈值，清理脚本会考虑要删除的文件，这些文件是最近最少使用的顺序。将值设置为0来禁用清除功能。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong></p>\n<ul>\n<li>cache_fs向后兼容v5.x Cache Server目录</li>\n<li>支持工作线程，使用<code>--workers</code>命令</li>\n<li>运行清理脚本时，<code>expireTimeSpan</code>的值用来确定要删除的文件。如果<code>maxCacheSize</code>指定，则脚本会检查惠存是否超过该值。超过该值脚本将清理最近最少使用的文件，直到缓存不再超过maxCacheSize。</li>\n</ul>\n<h2 id=\"cache-ram\"><a href=\"#cache-ram\" class=\"headerlink\" title=\"cache_ram\"></a>cache_ram</h2><p>&emsp;&emsp;高性能，完全内存的LRU缓存。</p>\n<p><strong>用法</strong></p>\n<p><code>--cache-module cache_ram</code></p>\n<p><strong>命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pageSize</td>\n<td style=\"text-align:center\">100000000</td>\n<td style=\"text-align:center\">缓存页面大小(以字节为单位)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maxPageCount</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">在缓存中分配的最大页面数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">minFreeBlockSize</td>\n<td style=\"text-align:center\">1024</td>\n<td style=\"text-align:center\">页面内最小分配单元(以字节为单位)。可以给较小的项目指定较低的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cachePath</td>\n<td style=\"text-align:center\"><code>.cache_ram</code></td>\n<td style=\"text-align:center\">缓存目录的路径，脏内存页面会定期保存到磁盘的此目录下，并在启动时加载。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persistence</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">将页面文件保存和加载到磁盘。如果为false，缓存会在退出时被清理。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persistenceOptions.autosave</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">设置为true时将自动保存更改，false为禁用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persistenceOptions.autosaveInterval</td>\n<td style=\"text-align:center\">10000</td>\n<td style=\"text-align:center\">保存页面更改的频率(以毫秒为单位)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong></p>\n<ul>\n<li>不支持工作线程</li>\n</ul>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>&emsp;&emsp;cache_ram是高性能缓存模式，但是需要内存要大于项目Library文件夹的2-3倍，对于大一点的项目就需要很大的物理内存。而cache_fs在实际测试中，并不逊色于cache_ram模式，当然仅仅是针对我的机器。并且用作server的mac mini还是一块1T的机械硬盘，如果更换上SSD可能会更快一些。所以两种模式，个人更推荐使用cache_fs。</p>\n<p>&emsp;&emsp;作为测试的资源Assets文件夹3.86G，Library文件夹2.65G，机器Server是mac mini，i5、8G内存、1T机械硬盘。客户端是mac mini，i5、16G内存、240GSSD。测试结果仅供参考，因为客户端mini 12年的比较老，跑unity还是有点卡，所以部分记录时间只能用大概范围，因为有时候导入的时候会卡死。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">比较项目</th>\n<th style=\"text-align:center\">cache_fs</th>\n<th style=\"text-align:center\">cache_ram</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">导入缓存结果(从客户端导本地缓存结果)</td>\n<td style=\"text-align:center\">3min+</td>\n<td style=\"text-align:center\">2min+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重新压缩贴图导入server</td>\n<td style=\"text-align:center\">26min+</td>\n<td style=\"text-align:center\">26min+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不适用cache server压缩贴图</td>\n<td style=\"text-align:center\">21min+</td>\n<td style=\"text-align:center\">21min+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">客户端导入server缓存结果</td>\n<td style=\"text-align:center\">117s</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;测试结果可能会因为机器的缘故略有不同，但是在对比下，cache_fs是server比较好的选择，虽然两种模式都不需要多好的cpu，但是cache_fs模式只需要一块够大的ssd，通常情况240G的SSD已经完全够用了，价格也不贵。但是使用cache_ram在我测试的情况下并没有好多少，首先门槛就要内存至少是project下library大小的2-3倍。</p>\n<p>&emsp;&emsp;综上，使用cache_fs已经能达到很好的效果了。比不适用cache server快了几乎10倍，而且还是在server使用的是机械硬盘的情况，换上ssd应该会更快一点。</p>\n<p>&emsp;&emsp;另外，关于cache的清理、镜像、高可靠性的相关内容，参考<a href=\"https://github.com/Unity-Technologies/unity-cache-server\" target=\"_blank\" rel=\"noopener\">unity-cache-server</a>官方文档。</p>\n","categories":[{"name":"unity","slug":"unity","count":2,"path":"api/categories/unity.json"}],"tags":[{"name":"cacheserver","slug":"cacheserver","count":2,"path":"api/tags/cacheserver.json"}]}