{"title":"Vue动态组件","slug":"vue-dynamic-components","date":"2018-12-08T10:43:21.000Z","updated":"2018-12-09T14:58:04.048Z","comments":true,"path":"api/articles/vue-dynamic-components.json","photos":[],"link":"","excerpt":"前言&emsp;&emsp;之前对Vue的了解很局限，感觉上和我实验室老师的Nodom框架很像，也可以说Nodom有一些借鉴Vue的地方，所以当时学习Vue也只是草草的入了个门，然后就从做demo开始学习。最近觉得自己用Vue好像到瓶颈期了，因为觉得Vue的教程是最好的资料，就准备认真的在过一遍Vue的教程。动态组件&amp;异步组件&emsp;&emsp;由于项目的问题，要解决从服务端获取表单内容，来动态生成表单，这就有点触及我的知识盲区了。难道要一个一个页面写，这也太傻了吧。了解了之后大概可以分为三种可以使用的方法，动态组件、异步组件、JSX。JSX了解不多，就不深入了。异步组件：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>Vue.component(&apos;async-example&apos;, function (resolve, reject) &#123;<br>  setTimeout(function () &#123;<br>    // 向 `resolve` 回调传递组件定义<br>    resolve(&#123;<br>      template: &apos;&lt;div&gt;I am async!&lt;/div&gt;&apos;<br>    &#125;)<br>  &#125;, 1000)<br>&#125;)<br>&emsp;&emsp;通过定义工厂函数来异步解析组件定义，只有组件在需要被渲染的时候才会触发这个工厂函数，而且Vue会将结果缓存起来供未来使用。不适用动态生成多个不同表单的应用场景。&emsp;&emsp;动态组件：1<br>&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;<br>&emsp;&emsp;使用Vue的is特性来决定要加载的组件，针对使用element-ui、iview等ui框架的话生成表单、验证等要方便的多。这样一来就可以定义一套格式规范，从服务端拿到这些数据然后根据type选择相应组件生成表单，只要把统一的样式定好，就基本可以实现动态生成组件了。以iview为例：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>&lt;!-- html --&gt;<br>&lt;Form&gt;<br>   &lt;FormItem&gt;<br>      &lt;component :is=&quot;componentName&quot;&gt;&lt;/component&gt;<br>   &lt;/FormItem&gt;<br>&lt;/Form&gt;<br><br>// ts<br>public componentName: string = &apos;Input&apos;;<br>","covers":null,"content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;之前对Vue的了解很局限，感觉上和我实验室老师的Nodom框架很像，也可以说Nodom有一些借鉴Vue的地方，所以当时学习Vue也只是草草的入了个门，然后就从做demo开始学习。最近觉得自己用Vue好像到瓶颈期了，因为觉得Vue的教程是最好的资料，就准备认真的在过一遍Vue的教程。</p>\n<h4 id=\"动态组件-amp-异步组件\"><a href=\"#动态组件-amp-异步组件\" class=\"headerlink\" title=\"动态组件&amp;异步组件\"></a>动态组件&amp;异步组件</h4><p>&emsp;&emsp;由于项目的问题，要解决从服务端获取表单内容，来动态生成表单，这就有点触及我的知识盲区了。难道要一个一个页面写，这也太傻了吧。了解了之后大概可以分为三种可以使用的方法，动态组件、异步组件、JSX。JSX了解不多，就不深入了。异步组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&apos;async-example&apos;, function (resolve, reject) &#123;</span><br><span class=\"line\">  setTimeout(function () &#123;</span><br><span class=\"line\">    // 向 `resolve` 回调传递组件定义</span><br><span class=\"line\">    resolve(&#123;</span><br><span class=\"line\">      template: &apos;&lt;div&gt;I am async!&lt;/div&gt;&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过定义工厂函数来异步解析组件定义，只有组件在需要被渲染的时候才会触发这个工厂函数，而且Vue会将结果缓存起来供未来使用。不适用动态生成多个不同表单的应用场景。</p>\n<p>&emsp;&emsp;动态组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;使用Vue的is特性来决定要加载的组件，针对使用element-ui、iview等ui框架的话生成表单、验证等要方便的多。这样一来就可以定义一套格式规范，从服务端拿到这些数据然后根据type选择相应组件生成表单，只要把统一的样式定好，就基本可以实现动态生成组件了。以iview为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html --&gt;</span><br><span class=\"line\">&lt;Form&gt;</span><br><span class=\"line\">   &lt;FormItem&gt;</span><br><span class=\"line\">      &lt;component :is=&quot;componentName&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">   &lt;/FormItem&gt;</span><br><span class=\"line\">&lt;/Form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// ts</span><br><span class=\"line\">public componentName: string = &apos;Input&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不同表单的数据问题\"><a href=\"#不同表单的数据问题\" class=\"headerlink\" title=\"不同表单的数据问题\"></a>不同表单的数据问题</h4><p>&emsp;&emsp;实现生成动态表单的问题已经解决了，但是由于我的需要不仅要生成表单还要拿到相应的数据。</p>\n<p>&emsp;&emsp;经过几天的思考(当然这几天还在做其他的东西)，暂时想到了一种解决方案，因为vue的v-model就是拿来做数据的双向绑定的，肯定要围绕这一点来想办法。因为所有生成表单的信息都要来自服务端，那么这些事肯定也要一并从服务端拿了，初步的想法是统一一个字段名来做form的数据对象名，叫<code>plugin-form</code>，然后在每个表单元素中定义一个字段名<code>plugin-form-item</code>，这样通过v-model就可以进行数据的双向绑定，用户进行了输入以后，数据就会绑定到相应字段上，只需遍历整个表单元素，将数据封装成对象就可以了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务端数据返回 json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    plugin_name: 'xxx',</span><br><span class=\"line\">    ···</span><br><span class=\"line\">    plugin_form: 'appForm',</span><br><span class=\"line\">    form_item: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            type: 'Input',</span><br><span class=\"line\">            plugin_form_item: 'app_name',</span><br><span class=\"line\">            ···</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttype: 'Input',</span><br><span class=\"line\">        \tplugin_form_item: 'project_path',</span><br><span class=\"line\">        \t···</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过v-model拿到的数据</span><br><span class=\"line\">appForm: &#123;</span><br><span class=\"line\">\tapp_name: '用户输入',</span><br><span class=\"line\">\tproject_path: '用户输入'</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交-amp-数据校验问题\"><a href=\"#提交-amp-数据校验问题\" class=\"headerlink\" title=\"提交&amp;数据校验问题\"></a>提交&amp;数据校验问题</h4><p>&emsp;&emsp;因为要涉及很多个不同的表单提交，可以用button提交暂存到localstorage，然后依次取出提交就可以了。关于校验可能要麻烦一些，还没有想好结构，但使用async-validator应该也没有太大问题。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>&emsp;&emsp;动态组件的意思就像是给组件加了一个v-if，只不过用is特性的方式看起来更优雅一些。想到动态组件，因为Vue官方教程切换tab时用的是动态组件，我一般使用的是router-view，然后上了下思否好像基本都是使用的router-view。</p>\n","categories":[{"name":"Vue","slug":"Vue","count":1,"path":"api/categories/Vue.json"}],"tags":[{"name":"components","slug":"components","count":1,"path":"api/tags/components.json"},{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"}]}