{"title":"JavaScript-单例模式","slug":"javascriptsingleton","date":"2018-07-06T16:19:04.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/javascriptsingleton.json","photos":[],"link":"","excerpt":"JavaScript单例模式  单例模式&emsp;&emsp;单例模式时一种较为简单的设计模式，传统的单例模式是指保证一个类只有一个实例，并提供一个访问它的全局访问点。  实现&emsp;&emsp;实现的思路是定义一个变量标志是否已经创建过实例，如果已经有实例，则返回该实例对象，否则创建一个实例并返回。用一个创建登录框的例子来说明单例模式在JavaScript中如何实现：  1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>var loginHtml = \"账号：&lt;input type=\\\"text\\\" /&gt;&lt;br/&gt;密码：&lt;input type=\\\"password\\\" /&gt;\";<br>var createLoginDiv = function(html) &#123;<br>  this.html = html;<br>  this.init();<br>&#125;;<br>createLoginDiv.prototype.init = function() &#123;<br>  var div = document.createElement('div');<br>  div.innerHTML = this.html;<br>  document.body.appendChild(div);<br>&#125;;<br>createLoginDiv.getInstance = (function() &#123;<br>  var instance = null;<br>  return function(html) &#123;<br>    if (instance === null) &#123;<br>      instance = new createLoginDiv(html);<br>    &#125;<br>    return instance;<br>  &#125;;<br>&#125;)();<br>var div1 = createLoginDiv.getInstance(loginHtml);<br>var div2 = createLoginDiv.getInstance(\"账号密码\");<br>console.log(div1 === div2); // true 并且页面只有一个登录框，为第一次创建的。<br>&emsp;&emsp;这样实现的单例模式耦合度较低，init只负责创建登录框对象，对于返回现有对象还是创建新对象交给getInstance去做，代码也很清晰。通过这样的方式我们想要在页面上只想要一个登录框时可以得到保证，只有一个登录框，不会重复创建，节约性能。优缺点优点：","covers":null,"content":"<p>JavaScript单例模式  </p>\n<hr>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>&emsp;&emsp;单例模式时一种较为简单的设计模式，传统的单例模式是指保证一个类只有一个实例，并提供一个访问它的全局访问点。  </p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>&emsp;&emsp;实现的思路是定义一个变量标志是否已经创建过实例，如果已经有实例，则返回该实例对象，否则创建一个实例并返回。用一个创建登录框的例子来说明单例模式在JavaScript中如何实现：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loginHtml = <span class=\"string\">\"账号：&lt;input type=\\\"text\\\" /&gt;&lt;br/&gt;密码：&lt;input type=\\\"password\\\" /&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> createLoginDiv = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.html = html;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">createLoginDiv.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  div.innerHTML = <span class=\"keyword\">this</span>.html;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">createLoginDiv.getInstance = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> createLoginDiv(html);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> div1 = createLoginDiv.getInstance(loginHtml);</span><br><span class=\"line\"><span class=\"keyword\">var</span> div2 = createLoginDiv.getInstance(<span class=\"string\">\"账号密码\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(div1 === div2); <span class=\"comment\">// true 并且页面只有一个登录框，为第一次创建的。</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这样实现的单例模式耦合度较低，init只负责创建登录框对象，对于返回现有对象还是创建新对象交给getInstance去做，代码也很清晰。通过这样的方式我们想要在页面上只想要一个登录框时可以得到保证，只有一个登录框，不会重复创建，节约性能。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li><p>单例模式声明一个命名空间，生成一个唯一的全局变量，用对象的方式来进行声明：var single = {…}，在多人开发时可以很好的解决命名冲突的问题，方便维护、控制代码。</p>\n</li>\n<li><p>单例只声明一个变量，如果我们在js中写多个方法，就会在window中生成多个变量，会占用更多内存单元，而且全局作用域很广，在众多处理函数中都可能改变，很难定位bug，而单例模式在创建的对象变量中可以更快的找到bug，可以大大减少bug修复时间和系统加载时间。</p>\n</li>\n<li><p>实现同一个功能时，比通过new新创建对象对内存、资源的占用更具有优势。</p>\n</li>\n</ul>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ul>\n<li><p>扩展性和灵活性不好，当重写单例对象中的方法会破坏原有的功能，当其中某个功能要改变，其他的不变时，单例模式就不太好处理了。</p>\n</li>\n<li><p>引用问题，当创建一个单例，var a = singleton.getInstance(“single1”)，将a赋值给b，即浅拷贝，var b = a，我们知道b相当于一个引用，b和a指向的地址相同，修改b时a也会改变。在一个单例对象创建完成之后是不能随意改的。有局限性。</p>\n</li>\n</ul>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>&emsp;&emsp;单例模式我们经常用到，在一个js中只创建一个对象，比如在一个demo.js中，我们可以这样 var demo = {}，这样暴露出来的命名只有demo一个，可以大大减少对全局变量的污染。这种方法，我们在项目中会经常用到，维护起来也比较方便。  </p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>&emsp;&emsp;最上面的代码实现只是为了说明单例模式是一个什么样的结构，但是在我们常见的项目中，单例模式就是基本是在一个js文件中只包含一个对象，在对象里面添加属性和方法。</p>\n","categories":[{"name":"javascript","slug":"javascript","count":3,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"},{"name":"singleton","slug":"singleton","count":1,"path":"api/tags/singleton.json"}]}