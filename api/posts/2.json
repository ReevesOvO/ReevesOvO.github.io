{"total":25,"pageSize":10,"pageCount":3,"data":[{"title":"Unity-Cache-Server","slug":"unity-cache-server","date":"2018-09-26T01:38:21.000Z","updated":"2018-11-06T08:01:02.319Z","comments":true,"path":"api/articles/unity-cache-server.json","excerpt":"<p><em>注：由于没有做过游戏开发，也没有使用过unity，所以有问题的地方欢迎在评论指正</em></p>\n<h2 id=\"缓存服务器\"><a href=\"#缓存服务器\" class=\"headerlink\" title=\"缓存服务器\"></a>缓存服务器</h2><p>&emsp;&emsp;Unity的打包流程中最慢的环节就是贴图的压缩。不同的平台，需要把原始贴图压缩成对应平台的压缩贴图格式。iOS和Android平台对应的格式不同。针对这个问题，Unity官方给出了一个CacheServer的解决方案。CacheServer只是一个文件cache服务器，记录了贴图源文件和转换参数(meta文件)以及转换器版本等信息构成的字符串的md5值作为文件索引。第一个做转换的人，在本地进行压缩后，会把结果传到CacheServer，其他人使用时，就会优先去看有没有人做过同样的工作，如果有就从cache服务器下载资源，没有就会进行压缩，并上传结果到CacheServer。如果源文件、转换参数都完全一样，结果会被缓存。在日常所有贴图都会被压缩过，可以节约压缩贴图的时间，从而减少打包时间。</p>\n<p>&emsp;&emsp;Unity官方在3月发布了Cache Server v6.0.0版本，官方宣称6.0带来了更高的可靠性和性能，以及一系列的新功能。包括新模块化，实现最大的I/O性能，支持高性能的缓存模式等等。</p>\n<p>&emsp;&emsp;Unity用户手册中也有关于Cache Server介绍和使用，但截至9.26日，官网的用户手册还停留在2月份的，没有做更新。关于文件更改请仔细阅读官网手册英文原文说明或下方翻译：</p>\n<blockquote>\n<p>关于缓存服务器，Unity具有一个全自动的资源管道。当修改了类似于<code>.psd</code>或<code>.fbx</code>文件的资源后，Unity将检测到更改并自动重新导入更改后的文件。从文件导入的数据之后将由Unity按其内部格式存储。资源管道最重要的部分是“热重载”功能和保证您的所有资源始终同步为所见即所得模式。此功能的实现也是要付出代价的。任何修改的资源必须重新导入。在一个大团队中工作时，获得了最新的管理源代码(Source Control)后，您通常需要等很长一段时间才可将所有其他成员修改或创建的资源重新导入完成。另外，在PC和移动平台之间来回切换工程平台，也将引发重新导入大部分资源的操作。</p>\n<p>在<strong>缓存服务器(Cache Server)</strong>上缓存导入的资源数据可大幅缩短导入资源占用的时间。</p>\n<p>缓存每个导入的资源基于：</p>\n<p>&emsp;&emsp;<em>资源文件本身</em></p>\n<p>&emsp;&emsp;<em>导入设置</em></p>\n<p>&emsp;&emsp;<em>资源导入器版本</em></p>\n<p>&emsp;&emsp;<em>当前平台</em></p>\n<p>如果上述四项任意一项发生变化，资源将重新导入，否则，会从缓存服务器(Cache Server)下载更新后的资源。启用偏好设置(Preferences)中的缓存服务器后，您可以共享多个工程的导入资源。</p>\n<p><strong><em>注意：将缓存服务器设置好后，这个过程将是完全自动的，这意味着无需其他工作流程。它只是缩短了导入工程的时间，无需您进行操作。</em></strong></p>\n</blockquote>\n<h2 id=\"配置要求\"><a href=\"#配置要求\" class=\"headerlink\" title=\"配置要求\"></a>配置要求</h2><p>&emsp;&emsp;只考虑将CacheServer搭在本地环境，cache服务器不同于版本控制，其缓存数据可以随时在本地重建，没必要使用远程服务器。如果存在开发团队分布在各地的情况，选择在每个地方配置一台独立缓存服务器比较好。</p>\n<p>&emsp;&emsp;因为CacheServer只相当于一个文件cache服务器，所以配置并不需要太高。但是为了最佳性能，机器必须要有足够的RAM来存储整个导入的工程文件夹。机器最好使用SSD，保证读写速度。另外CacheServer的CPU使用率非常低。最好使用Linux或Mac OS X系统。Windows 文件系统未对资源缓存服务器 (Asset Cache Server) 存储数据的方式进行特别理想的优化，Windows 上的文件锁定问题可引发问题，但 Linux 或 Mac OS X 上不会出现此类问题。</p>\n<h2 id=\"用户使用\"><a href=\"#用户使用\" class=\"headerlink\" title=\"用户使用\"></a>用户使用</h2>","keywords":null,"cover":"https://i.loli.net/2018/09/26/5bab3ffe7a483.png","content":null,"text":"注：由于没有做过游戏开发，也没有使用过unity，所以有问题的地方欢迎在评论指正缓存服务器&emsp;&emsp;Unity的打包流程中最慢的环节就是贴图的压缩。不同的平台，需要把原始贴图压缩成对应平台的压缩贴图格式。iOS和Android平台对应的格式不同。针对这个问题，Uni","link":"","raw":null,"photos":[],"categories":[{"name":"unity","slug":"unity","count":2,"path":"api/categories/unity.json"}],"tags":[{"name":"cacheserver","slug":"cacheserver","count":2,"path":"api/tags/cacheserver.json"}]},{"title":"原型链与继承-JS高级","slug":"the-proptotype-chain-and-inheritance","date":"2018-09-24T04:42:15.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/the-proptotype-chain-and-inheritance.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;初学javascript的时候对原型链和继承就一知半解，上半年复习的时候感觉十分良好，直到最近又被问道的时候，还是讲不清楚。自己就又看了一遍JS高级程序设计，力求有更深的理解，彻底搞懂。</p>\n<p>&emsp;&emsp;继承是OO语言中的一个最为人津津乐道的概念。许多OO语言都支持两种继承方式：接口继承和 实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。由于js中方法没有签名，在ECMAScript中无法实现接口继承。ECMAScript只支持实现继承，而且其 实现继承主要是依靠原型链来实现的。本段摘自JS高级程序设计。</p>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>&emsp;&emsp;原型和实例关系：</p>\n<blockquote>\n<p>每个构造函数(constructor)都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针，而实例(instance)都包含一个只想原型对象的内部指针。</p>\n</blockquote>\n<p>&emsp;&emsp;如果试图引用对象(instance)的某个属性，首先会在对象内部有没有这个属性，找不到时才会在该对象的原型(prototype)里去寻找这个属性。</p>\n<p>&emsp;&emsp;让一个实例的原型对象指向另一个类型的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thisConstructor.prototype = otherInstance</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;我们如果要引用thisConstructor构造的实例thisInstance的属性name，</p>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;初学javascript的时候对原型链和继承就一知半解，上半年复习的时候感觉十分良好，直到最近又被问道的时候，还是讲不清楚。自己就又看了一遍JS高级程序设计，力求有更深的理解，彻底搞懂。&emsp;&emsp;继承是OO语言中的一个最为人津津乐道的概念","link":"","raw":null,"photos":[],"categories":[{"name":"javascript","slug":"javascript","count":4,"path":"api/categories/javascript.json"}],"tags":[{"name":"原型链","slug":"原型链","count":1,"path":"api/tags/原型链.json"},{"name":"继承","slug":"继承","count":1,"path":"api/tags/继承.json"}]},{"title":"npm包开发","slug":"npmpackage","date":"2018-09-16T09:42:51.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/npmpackage.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;之前做项目的时候遇到了一个npm包在typescript程序中无法使用的问题，添加了@types也无法作用。打算自己学习一下npm包的开发。简单的记录一下npm包开发的过程。</p>\n<h2 id=\"必备\"><a href=\"#必备\" class=\"headerlink\" title=\"必备\"></a>必备</h2><p>&emsp;&emsp;1.注册一个npm账号，<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/</a></p>\n<p>&emsp;&emsp;2.安装nodejs</p>\n<p>&emsp;&emsp;3.安装git</p>\n<p>&emsp;&emsp;安装过程就不贴了，都很简单，安装教程也很多。</p>\n<h2 id=\"创建npm包\"><a href=\"#创建npm包\" class=\"headerlink\" title=\"创建npm包\"></a>创建npm包</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── bin           <span class=\"comment\">//命令配置</span></span><br><span class=\"line\">├── README<span class=\"selector-class\">.md</span>     <span class=\"comment\">//说明文档</span></span><br><span class=\"line\">├── index<span class=\"selector-class\">.js</span>      <span class=\"comment\">//主入口</span></span><br><span class=\"line\">├── src           <span class=\"comment\">//功能文件</span></span><br><span class=\"line\">├── package<span class=\"selector-class\">.json</span>  <span class=\"comment\">//包信息</span></span><br><span class=\"line\">└── test          <span class=\"comment\">//测试用例</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;大致的目录结构如上，我们在src下新建一个resize.js，然后写上代码：</p>","keywords":null,"cover":"https://i.loli.net/2018/09/17/5b9eed3b8bdf1.png","content":null,"text":"前言&emsp;&emsp;之前做项目的时候遇到了一个npm包在typescript程序中无法使用的问题，添加了@types也无法作用。打算自己学习一下npm包的开发。简单的记录一下npm包开发的过程。必备&emsp;&emsp;1.注册一个npm账号，https://www.n","link":"","raw":null,"photos":[],"categories":[{"name":"npm","slug":"npm","count":1,"path":"api/categories/npm.json"}],"tags":[{"name":"npm","slug":"npm","count":1,"path":"api/tags/npm.json"}]},{"title":"Vue slot(插槽)","slug":"vueslot","date":"2018-09-09T02:51:57.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vueslot.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;插槽是组件的一部分，当时做项目的时候使用到了插槽，并不是很懂，vue官网也没有说明的很清楚，只是说vue实现了一套内容分发的api，\\<slot>元素承载分发内容的出口。也就是说插槽是用来分发内容的。那就举个栗子说明一下：</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\">   这是插槽内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// component-a html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\thello，word！</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面app中放了一个component-a组件，组件的内容是下面的，这样在浏览器中渲染出来的结果是什么呢？结果是只会渲染出组件中的内容。app中组件标签里的内容被抛弃了。我们在组件中加一下slot，会发现之前写在组件内的内容出来了，这就是插槽的作用，可以分发内容。意思就是如果不使用插槽，在组件标签内写的任何内容都是不会生效的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;component-a&gt;</span><br><span class=\"line\">            这是插槽内容</span><br><span class=\"line\">         &lt;/component-a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        Vue.component(&apos;component-a&apos;,&#123;</span><br><span class=\"line\">            template: `</span><br><span class=\"line\">            &lt;div&gt;hello,word!&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;</span><br><span class=\"line\">            `</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        const app = new Vue(&#123;</span><br><span class=\"line\">            el: &apos;#app&apos;,</span><br><span class=\"line\">            data() &#123;</span><br><span class=\"line\">                return &#123;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个插槽也叫单个插槽。</p>\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>&emsp;&emsp;具名插槽就是具有名字的插槽，在组件中给插槽取上名字，然后再组件标签内slot属性填上名字，它就会跟组件内的name一一对应。那么没有名字的就是默认插槽了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">        .border &#123;</span><br><span class=\"line\">            border: 1px solid #e7494b;</span><br><span class=\"line\">        &#125;s</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;component-a&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                默认插槽的内容</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;template slot=&quot;slota&quot;&gt;</span><br><span class=\"line\">                插槽a的内容</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">            &lt;template slot=&quot;slotb&quot;&gt;</span><br><span class=\"line\">                插槽b的内容</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">         &lt;/component-a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        Vue.component(&apos;component-a&apos;,&#123;</span><br><span class=\"line\">            template: `</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">              &lt;h2&gt;具名插槽&lt;/h2&gt;</span><br><span class=\"line\">              &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">              &lt;div class=&quot;border&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;slota&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">              &lt;div class=&quot;border&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;slotb&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            `</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        const app = new Vue(&#123;</span><br><span class=\"line\">            el: &apos;#app&apos;,</span><br><span class=\"line\">            data() &#123;</span><br><span class=\"line\">                return &#123;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;插槽是组件的一部分，当时做项目的时候使用到了插槽，并不是很懂，vue官网也没有说明的很清楚，只是说vue实现了一套内容分发的api，\\元素承载分发内容的出口。也就是说插槽是用来分发内容的。那就举个栗子说明一下：1<br>2<br>3<br>4<br>5","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"slot","slug":"slot","count":1,"path":"api/tags/slot.json"}]},{"title":"Vue数据单向流动","slug":"vue-sigleway-flow","date":"2018-09-02T05:33:00.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/vue-sigleway-flow.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><hr>\n<p>  &emsp;&emsp;官方说法叫单向数据流，意思是父级prop的更新会向下流动到子组件中，但是反过来是不行的。为的是防止子组件修改父组件的状态。但是实际开发中我们可能会遇到以下两种情况：</p>\n<p>&emsp;&emsp;1. 需要使用并修改父组件传递的数据，但不需要回传给父组件</p>\n<p>&emsp;&emsp;2. 需要使用并修改父组件传递的数据并回传给父组件</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>&emsp;&emsp;如果我们将父组件prop的数据直接在input中进行了修改，vue在控制台中给出警告，栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;conponent-son :title=&quot;title&quot;&gt;&lt;/conponent-son&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        Vue.component(&apos;conponent-son&apos;, &#123;</span><br><span class=\"line\">            props: [&apos;title&apos;],</span><br><span class=\"line\">            template: `&lt;div&gt;</span><br><span class=\"line\">                &lt;input type=&quot;text&quot; v-model=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;/div&gt;`</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        const app = new Vue(&#123;</span><br><span class=\"line\">            el: &apos;#app&apos;,</span><br><span class=\"line\">            data() &#123;</span><br><span class=\"line\">                return &#123;</span><br><span class=\"line\">                    title: &apos;文章&apos;,</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted() &#123;</span><br><span class=\"line\">                // 模拟异步加载数据</span><br><span class=\"line\">                window.setTimeout(()=&gt;&#123;</span><br><span class=\"line\">                    this.title = &apos;文章&apos;;</span><br><span class=\"line\">                &#125;,100);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2018/09/02/5b8bb4fc4f1e6.png\" alt=\"错误\"></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2>","keywords":null,"cover":"https://i.loli.net/2018/09/02/5b8bb4fc4f1e6.png","content":null,"text":"介绍  &emsp;&emsp;官方说法叫单向数据流，意思是父级prop的更新会向下流动到子组件中，但是反过来是不行的。为的是防止子组件修改父组件的状态。但是实际开发中我们可能会遇到以下两种情况：&emsp;&emsp;1. 需要使用并修改父组件传递的数据，但不需要回传给父组件&","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"component","slug":"component","count":1,"path":"api/tags/component.json"},{"name":"单向流动","slug":"单向流动","count":1,"path":"api/tags/单向流动.json"}]},{"title":"双向绑定","slug":"vuedoublesidedbind","date":"2018-08-26T02:24:55.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vuedoublesidedbind.json","excerpt":"<h2 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h2><p>&emsp;&emsp;数据的双向绑定可以说是MVVM框架的核心思想，MVVM框架包括三个部分，Model、View和ViewModel，分别指数据、视图、ViewModel可以说是前二者的连接者，二者通过它实现数据的双向绑定。以Vue为例，先看下Vue官网数据绑定的示意图：</p>\n<p><img src=\"https://i.loli.net/2018/08/26/5b827f69c1a85.png\" alt=\"数据绑定\"></p>\n<p>&emsp;&emsp;<em>这张图想表达的是，对象a下的属性b定义了getter、setter对属性进行劫持，当属性值改变时就会notify通知watch对象，而watch对象则会notify到view更新。反之，在视图改变数据时，也会触发订阅者watch，更新数据到data中。这样的model能实时响应view上的数据变化，view实时响应model的数据变化，这样的一个过程就叫数据的双向绑定。</em></p>\n<p>&emsp;&emsp;Vue是通过ES5中Object.defineProperty()这个方法来实现getter、setter对数据进行劫持，所以要运行Vue的运行环境需支持ES5。</p>\n<h2 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h2><p>&emsp;&emsp;这是一个ES5的方法，可以在一个对象上定义一个新属性或用来修改一个已经存在的属性，并返回该对象。目前对象的属性描述符有两种主要形式：此数据描述符和存取描述符。</p>\n<p>&emsp;&emsp;<em>数据描述符是一个拥有一个可写或不可写值的属性</em></p>\n<p>&emsp;&emsp;<em>存取描述符是由一对getter-setter函数功能来描述的属性</em></p>\n<p>&emsp;&emsp;描述符只能是以上两种之一，不可能同时拥有这两种。描述符属性包括：configurable(可配置性，这又为true时才能设置)、Writable(是否可写)、Enumerable(是否可枚举)、get(给属性提供getter)、setter(给属性提供setter)。看下这个例子：</p>","keywords":null,"cover":"https://i.loli.net/2018/08/26/5b827f69c1a85.png","content":null,"text":"双向绑定&emsp;&emsp;数据的双向绑定可以说是MVVM框架的核心思想，MVVM框架包括三个部分，Model、View和ViewModel，分别指数据、视图、ViewModel可以说是前二者的连接者，二者通过它实现数据的双向绑定。以Vue为例，先看下Vue官网数据绑定的示意","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"双向绑定","slug":"双向绑定","count":1,"path":"api/tags/双向绑定.json"}]},{"title":"Vuex","slug":"vuex","date":"2018-08-19T07:30:47.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vuex.json","excerpt":"<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><p>&emsp;&emsp;官方说vuex是一个专为vue.js应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式</strong>存储管理应用的<strong>所有组件的状态</strong>，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>&emsp;&emsp;按我的理解就是，Vuex也是用来管理组建之间通信的。组件之间都是独立的，组件之间想实现通信，就要用到之前的文章提到的props选项，自定义事件，以及eventbus，前两种只适用于父子关系，eventbus可以适用所有的组件通信。但是据说不是很推荐，我想可能的原因是在大型项目中，到处引用一个eventbus代码可读性差、可能会命名冲突等，以及数据并不好进行管理。而Vuex就是解决这样的问题的，将组件需要共享的数据提出来，在一定的规则下管理这些数据，在大型项目中看起来就会仅仅有条。当然我也说了，是<strong>大型项目</strong>，一般的小项目还是用前三种方式去做吧，不要为了用vuex而用。</p>\n<h2 id=\"使用Vuex\"><a href=\"#使用Vuex\" class=\"headerlink\" title=\"使用Vuex\"></a>使用Vuex</h2><p>&emsp;&emsp;先创建一个实例，了解一下vuex：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vuex<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vuex/3.0.1/vuex.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    Vue.use(Vuex);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 存放组件之间共享的数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">        state: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'myName'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 显示更改state里的数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">        mutations: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 获取数据的方法</span></span></span><br><span class=\"line\"><span class=\"undefined\">        getters: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 类似mutation，不是直接变更状态，而是提交mutation，还可以包含异步操作</span></span></span><br><span class=\"line\"><span class=\"undefined\">        actions: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">new</span> Vue (&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                name: <span class=\"string\">'null'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        store,</span></span><br><span class=\"line\"><span class=\"undefined\">        mounted() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$store);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125; </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在创建vue实例前需使用vuex，也就是Vue.use(Vuex)，使用Vuex.Store({})方法创建一个仓库，当Vue组件从store中读取state选项也就是状态，如果store中状态发生更新时，它会及时响应将数据发给其它组件，如果要直接改变store的状态，就使用使用mutations进行显式的更改。另外四个核心选项在代码中已经注释说明了。我们在控制台中打印了$store，来看看有哪些东西：</p>\n<p><img src=\"https://i.loli.net/2018/08/19/5b797da78e02d.png\" alt=\"store\"></p>\n<p>&emsp;&emsp;一般情况下会在组件的计算属性中来获取state的数据，原因是计算属性会监控数据变化，数据改变就会响应。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在上面代码的html中加一个helloword的标签，在注册一个helloword的组件。就可以到浏览器中看到效果了。</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'helloword'</span>,&#123;</span><br><span class=\"line\">        template:<span class=\"string\">\"&lt;div&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;\"</span>,</span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\">            name() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.name</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">         mounted() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"https://i.loli.net/2018/08/19/5b797da78e02d.png","content":null,"text":"Vuex&emsp;&emsp;官方说vuex是一个专为vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&emsp;&emsp;按我的理解就是，Vuex也是用来管理组建之间通信的。组件之间都是独立","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"通信","slug":"通信","count":2,"path":"api/tags/通信.json"},{"name":"vuex","slug":"vuex","count":1,"path":"api/tags/vuex.json"}]},{"title":"图解http读后感","slug":"tujiehttp","date":"2018-08-14T15:24:18.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/tujiehttp.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  &emsp;&emsp;去年上计算机网络的时候，没有好好学，很多东西都是懵懵懂懂的，最后草草复习了一下，考过了这门课。但是网络这块的知识在开发中还是蛮重要的，所以就在推荐下买了这本图解http，在这里总结下这本书的内容以及来一篇读后感。</p>\n<h2 id=\"内容整理\"><a href=\"#内容整理\" class=\"headerlink\" title=\"内容整理\"></a>内容整理</h2><p>  <strong>1.了解web及网络基础</strong><br>  &emsp;&emsp;web使用HTTP(HyperText Transfer Protocol,超文本传输协议)作为规范，完成客户端到服务端等一系列运作。web是建立在HTTP协议上通信的。<br>  &emsp;&emsp;1989.03，http诞生。1990.11，CERN成功研发世界上第一台Web服务器和Web浏览器。1994.12，网景发布Netscape Nacigator 1.0，1995年微软发布IE1.0/2.0。95年起，两家公司爆发浏览器大战，各自拓展HTML，对Web标准视而不见，还多次新增功能而不出文档说明(web开发兼容性的坑就是从这来的T.T)。2000年后，网景没落，Firefox、chrome、opera、Safari于IE抢占市场份额。1996年5月HTTP标准正式公布，至今广泛应用于服务器端。1997年HTTP/1.1公布，作为目前主流的HTTP协议版本。HTTP/2.0正在制定中。</p>\n<p>&emsp;&emsp;TCP/IP是互联网相关的各类协议族的总称。TCP/IP协议族里重要的一点就是分层，按层次分为以下4层：应用层、传输层、网络层和数据链路层。</p>\n<p>&emsp;&emsp;应用层：应用层决定了向用户提供应用服务时通信的活动，协议族内预存了各类通用应用服务，如FTP、DNS，HTTP也处于这一层。</p>\n<p>&emsp;&emsp;传输层：对上层应用层提供处于网络连接中的两台计算机之间的数据传输。传输层有两个协议TCP和UDP。</p>\n<p>&emsp;&emsp;网络层：处理在网络上流动的数据包，数据包是网络传输的最小数据单位，这一层规定了通过怎样的路径到达对方计算机，并把数据包给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项中选择一条传输路线。</p>\n<p>&emsp;&emsp;数据链路层：处理连接网络的硬件部分，包括操作系统、硬件的设备驱动及光线等物理可见的部分。硬件上的范畴均在链路层的作用范围之内。</p>\n<p>&emsp;&emsp;TCP/IP传输流，通过分层与对方进行通信，发送端应用层自上而下，接收端自下而上，如图：</p>","keywords":null,"cover":"https://i.loli.net/2018/08/16/5b755a606febc.png","content":null,"text":"前言  &emsp;&emsp;去年上计算机网络的时候，没有好好学，很多东西都是懵懵懂懂的，最后草草复习了一下，考过了这门课。但是网络这块的知识在开发中还是蛮重要的，所以就在推荐下买了这本图解http，在这里总结下这本书的内容以及来一篇读后感。内容整理  1.了解web及网络基础","link":"","raw":null,"photos":[],"categories":[{"name":"网络","slug":"网络","count":1,"path":"api/categories/网络.json"}],"tags":[{"name":"http","slug":"http","count":1,"path":"api/tags/http.json"}]},{"title":"怒提Hexo一血","slug":"firstblood","date":"2018-08-11T16:07:00.000Z","updated":"2018-10-02T15:01:49.427Z","comments":true,"path":"api/articles/firstblood.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>  &emsp;&emsp;之前弄了个腾讯云的学生机，顺带利用学生优惠申请了个域名，不知道干嘛就搭了一个wordpress。当时用wordpress还是蛮流行的，有很多丰富的插件，会一些html也可以自己定制一些东西。wordpress很臃肿，又受限于学生机，首次加载贼慢，还有学生机的内存，之前课程的时候弄ubuntu图形界面，主机崩掉了，丢失了一些数据。最近不知怎么wordpress站点被黑了，每天会发几篇文章。也没有其他恶意行为，找了原因，发现也没完全解决掉。然后就被安利了hexo，了解了下，hexo全部生成静态文件，加载很快而且没有数据库，迁移也方便，也很安全。</p>\n<p>  &emsp;&emsp;hexo的搭建还是蛮简单的，但是在这个过程中还是踩了很多坑，就来分享一下遇到的坑。</p>\n<h2 id=\"hexo搭建\"><a href=\"#hexo搭建\" class=\"headerlink\" title=\"hexo搭建\"></a>hexo搭建</h2><hr>\n<p>  &emsp;&emsp;这个过程还是蛮简单的，按照网上普通的配置教程进行配置就行了。就来说我这个过程遇到的坑。</p>\n<p>  <strong>1.windows下cmd和gitbash，都无法成功登陆github。</strong><br>  &emsp;&emsp;本地搭建好hexo之后往github上部署的时候，我使用的https，这种情况要输入github账号和密码，部署的时候会弹出登陆，确认了很多遍账号密码确实没输错，才觉得可能这里有问题，有很多人都遇到了问题。最后使用ssh成功登陆并部署成功，所以建议是从git拉代码还是使用ssh比较稳妥，当然其他os好像不会存在这个问题。</p>\n<h2 id=\"使用自己的域名\"><a href=\"#使用自己的域名\" class=\"headerlink\" title=\"使用自己的域名\"></a>使用自己的域名</h2><hr>","keywords":null,"cover":null,"content":null,"text":"前言  &emsp;&emsp;之前弄了个腾讯云的学生机，顺带利用学生优惠申请了个域名，不知道干嘛就搭了一个wordpress。当时用wordpress还是蛮流行的，有很多丰富的插件，会一些html也可以自己定制一些东西。wordpress很臃肿，又受限于学生机，首次加载贼慢，还","link":"","raw":null,"photos":[],"categories":[{"name":"other","slug":"other","count":1,"path":"api/categories/other.json"}],"tags":[{"name":"firstblood","slug":"firstblood","count":1,"path":"api/tags/firstblood.json"}]},{"title":"Vue组件之间通信","slug":"vueconponentscommunity","date":"2018-08-05T09:56:29.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vueconponentscommunity.json","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&emsp;&emsp;之前在学校一直在用nodom框架进行开发，对vue的了解也仅仅局限于对比二者的区别，并没有很深入的去了解。而且nodom的用法和vue的比较相似，所以上手vue是比较快的，但是其中很多原理并不熟悉，所以想总结并分享一下学到的东西。  </p>\n<p>&emsp;&emsp;组件化是vue.js或者说现在的mvvm框架中一个重要的思想，也是前端发展的趋势，这其中组件间的通信又是vue数据驱动的灵魂所在。所以在这谈谈Vue2.x的组件通信，这一篇主要聊聊非Vuex的做法，下一篇文章再讲Vuex。Vue2.x已经废弃了$dispatch和$broadcast，nodom中还保留着broadcast的方法…  </p>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><h4 id=\"1-父子组件，父组件向子组件传递数据\"><a href=\"#1-父子组件，父组件向子组件传递数据\" class=\"headerlink\" title=\"1.父子组件，父组件向子组件传递数据\"></a>1.父子组件，父组件向子组件传递数据</h4><p>&emsp;&emsp;父组件向子组件传递数据时，这是比较简单也是比较常见的一种方式，我们首先看看props，prop的值有两种一种是使用数组和对象，静态数据比较简单，作为理解就使用数组为例了，先看下代码：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">      父组件</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">message</span>=<span class=\"string\">\"父亲给儿子说的话：xxxxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    Vue.component(<span class=\"string\">'child'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      props: [<span class=\"string\">'message'</span>],</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">      template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123; &#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      el: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过在props中声明数据，在子组件中添加message并赋值进行传递，需要注意的是HTML不区分大小写，在dom模板中，驼峰命名的props名称要转为短横线分隔命名。  </p>\n<p>&emsp;&emsp;另外在实际开发中，很少会传递死的数据，大部分都是使用动态数据，此时我们需要使用v-bind指令来绑定父组件数据，当父组件数据发生变化时，也会传递给子组件，代码：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">      父组件数据</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMessage\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    child :message=\"parentMessage\"<span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    Vue.component(<span class=\"string\">'child'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      props: [<span class=\"string\">'message'</span>],</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">      template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>子组件收到的消息：&#123; &#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        parentMessage: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;之前在学校一直在用nodom框架进行开发，对vue的了解也仅仅局限于对比二者的区别，并没有很深入的去了解。而且nodom的用法和vue的比较相似，所以上手vue是比较快的，但是其中很多原理并不熟悉，所以想总结并分享一下学到的东西。  &emsp;&em","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"VUE","slug":"VUE","count":1,"path":"api/tags/VUE.json"},{"name":"组件","slug":"组件","count":1,"path":"api/tags/组件.json"},{"name":"通信","slug":"通信","count":2,"path":"api/tags/通信.json"}]}]}