{"total":22,"pageSize":10,"pageCount":3,"data":[{"title":"HTML语义化&HTML5","slug":"htmlyuyihua","date":"2018-05-10T13:05:59.000Z","updated":"2018-10-02T15:01:49.427Z","comments":true,"path":"api/articles/htmlyuyihua.json","excerpt":"<h2 id=\"1、什么是HTML语义化？\"><a href=\"#1、什么是HTML语义化？\" class=\"headerlink\" title=\"1、什么是HTML语义化？\"></a>1、什么是HTML语义化？</h2><p>&emsp;&emsp;就我自己理解来说，HTML是超文本标记语言。语义化就是让我们清楚整个页面的结构，不论是从代码还是文本内容，不仅要我们人清楚，也要让机器清楚。纯HTML不带样式的时候，我们也能通过代码知道标签标记的是什么内容。比如H标签，我们知道这是一个标题，p一个段落，table表格，form表单等等。HTML5更加注重语义化，新增了很多语义化的标签，如header、nav、footer、article等。关于语义化一些更多的内容可以看这个<a href=\"https://www.zhihu.com/question/20455165\" title=\"如何理解 Web 语义化？\" target=\"_blank\" rel=\"noopener\">如何理解 Web 语义化？</a></p>\n<h2 id=\"2、为什么要语义化？\"><a href=\"#2、为什么要语义化？\" class=\"headerlink\" title=\"2、为什么要语义化？\"></a>2、为什么要语义化？</h2><p>&emsp;&emsp;在此之前，我写代码也基本上是全篇用div+css实现整个页面结构的，既然我们使用div+css就可以了，为什么还要使用语义化呢？  </p>\n<p>&emsp;&emsp;从实现的效果上看，使用语义化的代码和div+css的代码并没有区别，但是代码不仅是给人看的，机器也要看。从维护上面来说，语义化标签比满篇div更好维护，在页面出问题时，语义化会更加的友好。  </p>\n<p>&emsp;&emsp;语义化的好处在于建立起好的HTML结构，使搜索引擎更容易建立索引、抓取。另外就是结构清晰，便于开发人员维护。（大厂的做法，比如阿里的淘宝在div+css实现之余，也会用一些语义化的标签进行强调）  </p>\n<h2 id=\"3、语义化代码应该注意些什么？\"><a href=\"#3、语义化代码应该注意些什么？\" class=\"headerlink\" title=\"3、语义化代码应该注意些什么？\"></a>3、语义化代码应该注意些什么？</h2><ul>\n<li><p>尽可能少的使用无语义的标签div和span；在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</p>\n</li>\n<li><p>不要使用纯样式标签，如：b、font、u等，改用css设置。需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</p>\n</li>\n<li><p>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</p>\n</li>\n<li><p>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。</p>\n</li>\n</ul>\n<h2 id=\"4、常用的一些HTML语义标签\"><a href=\"#4、常用的一些HTML语义标签\" class=\"headerlink\" title=\"4、常用的一些HTML语义标签\"></a>4、常用的一些HTML语义标签</h2><ul>\n<li><p><code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code> ，作为标题使用，并且依据重要性递减，<code>&lt;h1&gt;</code> 是最高的等级。</p>\n</li>\n<li><p><code>&lt;p&gt;</code>段落标记，知道了 <code>&lt;p&gt;</code> 作为段落，你就不会再使用 <code>&lt;br /&gt;</code> 来换行了，而且不需要 <code>&lt;br /&gt;</code> 来区分段落与段落。<code>&lt;p&gt;</code> 中的文字会自动换行，而且换行的效果优于 <code>&lt;br /&gt;</code>。段落与段落之间的空隙也可以利用 CSS 来控制，很容易而且清晰的区分出段落与段落。</p>\n</li>\n<li><p><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>，<code>&lt;ul&gt;</code> 无序列表，这个被大家广泛的使用，<code>&lt;ol&gt;</code> 有序列表不常用。在 Web 标准化过程中，<code>&lt;ul&gt;</code> 还被更多的用于导航条，本来导航条就是个列表，这样做是完全正确的，而且当你的浏览器不支持 CSS 的时候，导航链接仍然很好使，只是美观方面差了一点而已。</p>\n</li>\n<li><p><code>&lt;dl&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dd&gt;</code>，<code>&lt;dl&gt;</code> 就是“定义列表”。比如说词典里面的词的解释、定义就可以用这种列表。dl不单独使用，它通常与dt和dd一起使用。dl开启一个定义列表，dt表示要定义的项目名称，dd表示对dt的项目的描述。</p>\n</li>\n<li><p><code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>，<code>&lt;em&gt;</code> 是用作强调，<code>&lt;strong&gt;</code> 是用作重点强调。</p>\n</li>\n<li><p><code>&lt;table&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code>、<code>&lt;caption&gt;</code>， 就是用来做表格不要用来布局</p>\n</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"1、什么是HTML语义化？&emsp;&emsp;就我自己理解来说，HTML是超文本标记语言。语义化就是让我们清楚整个页面的结构，不论是从代码还是文本内容，不仅要我们人清楚，也要让机器清楚。纯HTML不带样式的时候，我们也能通过代码知道标签标记的是什么内容。比如H标签，我们知道这","link":"","raw":null,"photos":[],"categories":[{"name":"HTML/CSS","slug":"HTML-CSS","count":2,"path":"api/categories/HTML-CSS.json"}],"tags":[]},{"title":"【CSS】css居中方案","slug":"csscenter","date":"2018-05-07T14:54:57.000Z","updated":"2018-10-02T15:01:49.427Z","comments":true,"path":"api/articles/csscenter.json","excerpt":"<p>&emsp;&emsp;先说一下水平居中和垂直居中的一般方案.</p>\n<p>&emsp;&emsp;水平居中设置：</p>\n<blockquote>\n<ol>\n<li><p>行内元素：给父元素设置text-align:center;</p>\n</li>\n<li><p>定宽块状元素：设置左右margin值为auto</p>\n</li>\n<li><p>不定宽块状元素：</p>\n<ol>\n<li><p>在元素外加入table标签(包括table、tbody、tr、td)，在把该元素写在td内，然后设置margin的值为auto，注意是设置table不是该元素。</p>\n</li>\n<li><p>给该元素设置display:inline方法，居中方法和行内一致。</p>\n</li>\n<li><p>父元素设置float:left;position:relative和left:50%，子元素设置position:relative和left:-50%。</p>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p>&emsp;&emsp;垂直居中设置：</p>\n<blockquote>\n<ol>\n<li><p>父元素高度确定的单行文本：设置height = line-height;</p>\n</li>\n<li><p>父元素高度确定的多行文本：</p>\n<ol>\n<li><p>插入table(和水平居中一致)，设置vertical-align:middle;</p>\n</li>\n<li><p>先设置display:table-cell，在设置vertical-align: middle;  </p>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p>&emsp;&emsp;下面就提供几种居中的方法：</p>\n<h4 id=\"1-使用定位：position-absolute-设置left、top、margin-left、margin-top属性。\"><a href=\"#1-使用定位：position-absolute-设置left、top、margin-left、margin-top属性。\" class=\"headerlink\" title=\"1.使用定位：position:absolute;设置left、top、margin-left、margin-top属性。\"></a>1.使用定位：position:absolute;设置left、top、margin-left、margin-top属性。</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这种方法好处是浏览器基本都能兼容，不足的地方就是需要我们固定宽高。</p>\n<h4 id=\"2-使用position-absolute-设置top、bottom、right、left为0，margin-auto\"><a href=\"#2-使用position-absolute-设置top、bottom、right、left为0，margin-auto\" class=\"headerlink\" title=\"2.使用position: absolute;设置top、bottom、right、left为0，margin:auto;\"></a>2.使用position: absolute;设置top、bottom、right、left为0，margin:auto;</h4>","keywords":null,"cover":null,"content":null,"text":"&emsp;&emsp;先说一下水平居中和垂直居中的一般方案.&emsp;&emsp;水平居中设置：行内元素：给父元素设置text-align:center;定宽块状元素：设置左右margin值为auto不定宽块状元素：在元素外加入table标签(包括table、tbody、tr","link":"","raw":null,"photos":[],"categories":[{"name":"HTML/CSS","slug":"HTML-CSS","count":2,"path":"api/categories/HTML-CSS.json"}],"tags":[{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"},{"name":"居中","slug":"居中","count":1,"path":"api/tags/居中.json"}]}]}