{"name":"继承","slug":"继承","count":1,"postlist":[{"title":"原型链与继承-JS高级","slug":"the-proptotype-chain-and-inheritance","date":"2018-09-24T04:42:15.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/the-proptotype-chain-and-inheritance.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;初学javascript的时候对原型链和继承就一知半解，上半年复习的时候感觉十分良好，直到最近又被问道的时候，还是讲不清楚。自己就又看了一遍JS高级程序设计，力求有更深的理解，彻底搞懂。</p>\n<p>&emsp;&emsp;继承是OO语言中的一个最为人津津乐道的概念。许多OO语言都支持两种继承方式：接口继承和 实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。由于js中方法没有签名，在ECMAScript中无法实现接口继承。ECMAScript只支持实现继承，而且其 实现继承主要是依靠原型链来实现的。本段摘自JS高级程序设计。</p>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>&emsp;&emsp;原型和实例关系：</p>\n<blockquote>\n<p>每个构造函数(constructor)都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针，而实例(instance)都包含一个只想原型对象的内部指针。</p>\n</blockquote>\n<p>&emsp;&emsp;如果试图引用对象(instance)的某个属性，首先会在对象内部有没有这个属性，找不到时才会在该对象的原型(prototype)里去寻找这个属性。</p>\n<p>&emsp;&emsp;让一个实例的原型对象指向另一个类型的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thisConstructor.prototype = otherInstance</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;我们如果要引用thisConstructor构造的实例thisInstance的属性name，</p>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;初学javascript的时候对原型链和继承就一知半解，上半年复习的时候感觉十分良好，直到最近又被问道的时候，还是讲不清楚。自己就又看了一遍JS高级程序设计，力求有更深的理解，彻底搞懂。&emsp;&emsp;继承是OO语言中的一个最为人津津乐道的概念","link":"","raw":null,"photos":[],"categories":[{"name":"javascript","slug":"javascript","count":3,"path":"api/categories/javascript.json"}],"tags":[{"name":"原型链","slug":"原型链","count":1,"path":"api/tags/原型链.json"},{"name":"继承","slug":"继承","count":1,"path":"api/tags/继承.json"}]}]}