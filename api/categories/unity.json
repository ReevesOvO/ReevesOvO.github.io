{"name":"unity","slug":"unity","count":2,"postlist":[{"title":"Unity-Cache-Server","slug":"unity-cache-server","date":"2018-09-26T01:38:21.000Z","updated":"2018-11-06T08:01:02.319Z","comments":true,"path":"api/articles/unity-cache-server.json","excerpt":"<p><em>注：由于没有做过游戏开发，也没有使用过unity，所以有问题的地方欢迎在评论指正</em></p>\n<h2 id=\"缓存服务器\"><a href=\"#缓存服务器\" class=\"headerlink\" title=\"缓存服务器\"></a>缓存服务器</h2><p>&emsp;&emsp;Unity的打包流程中最慢的环节就是贴图的压缩。不同的平台，需要把原始贴图压缩成对应平台的压缩贴图格式。iOS和Android平台对应的格式不同。针对这个问题，Unity官方给出了一个CacheServer的解决方案。CacheServer只是一个文件cache服务器，记录了贴图源文件和转换参数(meta文件)以及转换器版本等信息构成的字符串的md5值作为文件索引。第一个做转换的人，在本地进行压缩后，会把结果传到CacheServer，其他人使用时，就会优先去看有没有人做过同样的工作，如果有就从cache服务器下载资源，没有就会进行压缩，并上传结果到CacheServer。如果源文件、转换参数都完全一样，结果会被缓存。在日常所有贴图都会被压缩过，可以节约压缩贴图的时间，从而减少打包时间。</p>\n<p>&emsp;&emsp;Unity官方在3月发布了Cache Server v6.0.0版本，官方宣称6.0带来了更高的可靠性和性能，以及一系列的新功能。包括新模块化，实现最大的I/O性能，支持高性能的缓存模式等等。</p>\n<p>&emsp;&emsp;Unity用户手册中也有关于Cache Server介绍和使用，但截至9.26日，官网的用户手册还停留在2月份的，没有做更新。关于文件更改请仔细阅读官网手册英文原文说明或下方翻译：</p>\n<blockquote>\n<p>关于缓存服务器，Unity具有一个全自动的资源管道。当修改了类似于<code>.psd</code>或<code>.fbx</code>文件的资源后，Unity将检测到更改并自动重新导入更改后的文件。从文件导入的数据之后将由Unity按其内部格式存储。资源管道最重要的部分是“热重载”功能和保证您的所有资源始终同步为所见即所得模式。此功能的实现也是要付出代价的。任何修改的资源必须重新导入。在一个大团队中工作时，获得了最新的管理源代码(Source Control)后，您通常需要等很长一段时间才可将所有其他成员修改或创建的资源重新导入完成。另外，在PC和移动平台之间来回切换工程平台，也将引发重新导入大部分资源的操作。</p>\n<p>在<strong>缓存服务器(Cache Server)</strong>上缓存导入的资源数据可大幅缩短导入资源占用的时间。</p>\n<p>缓存每个导入的资源基于：</p>\n<p>&emsp;&emsp;<em>资源文件本身</em></p>\n<p>&emsp;&emsp;<em>导入设置</em></p>\n<p>&emsp;&emsp;<em>资源导入器版本</em></p>\n<p>&emsp;&emsp;<em>当前平台</em></p>\n<p>如果上述四项任意一项发生变化，资源将重新导入，否则，会从缓存服务器(Cache Server)下载更新后的资源。启用偏好设置(Preferences)中的缓存服务器后，您可以共享多个工程的导入资源。</p>\n<p><strong><em>注意：将缓存服务器设置好后，这个过程将是完全自动的，这意味着无需其他工作流程。它只是缩短了导入工程的时间，无需您进行操作。</em></strong></p>\n</blockquote>\n<h2 id=\"配置要求\"><a href=\"#配置要求\" class=\"headerlink\" title=\"配置要求\"></a>配置要求</h2><p>&emsp;&emsp;只考虑将CacheServer搭在本地环境，cache服务器不同于版本控制，其缓存数据可以随时在本地重建，没必要使用远程服务器。如果存在开发团队分布在各地的情况，选择在每个地方配置一台独立缓存服务器比较好。</p>\n<p>&emsp;&emsp;因为CacheServer只相当于一个文件cache服务器，所以配置并不需要太高。但是为了最佳性能，机器必须要有足够的RAM来存储整个导入的工程文件夹。机器最好使用SSD，保证读写速度。另外CacheServer的CPU使用率非常低。最好使用Linux或Mac OS X系统。Windows 文件系统未对资源缓存服务器 (Asset Cache Server) 存储数据的方式进行特别理想的优化，Windows 上的文件锁定问题可引发问题，但 Linux 或 Mac OS X 上不会出现此类问题。</p>\n<h2 id=\"用户使用\"><a href=\"#用户使用\" class=\"headerlink\" title=\"用户使用\"></a>用户使用</h2>","keywords":null,"cover":"https://i.loli.net/2018/09/26/5bab3ffe7a483.png","content":null,"text":"注：由于没有做过游戏开发，也没有使用过unity，所以有问题的地方欢迎在评论指正缓存服务器&emsp;&emsp;Unity的打包流程中最慢的环节就是贴图的压缩。不同的平台，需要把原始贴图压缩成对应平台的压缩贴图格式。iOS和Android平台对应的格式不同。针对这个问题，Uni","link":"","raw":null,"photos":[],"categories":[{"name":"unity","slug":"unity","count":2,"path":"api/categories/unity.json"}],"tags":[{"name":"cacheserver","slug":"cacheserver","count":2,"path":"api/tags/cacheserver.json"}]},{"title":"unity-cache-server-cache-modules","slug":"unity-cache-server-cache-modules","date":"2018-09-28T02:43:06.000Z","updated":"2018-10-02T15:01:49.428Z","comments":true,"path":"api/articles/unity-cache-server-cache-modules.json","excerpt":"<h2 id=\"Cache-Modules\"><a href=\"#Cache-Modules\" class=\"headerlink\" title=\"Cache Modules\"></a>Cache Modules</h2><p>&emsp;&emsp;Unity-cache-server v6的缓存服务器支持两种缓存机制：</p>\n<ul>\n<li>cache_fs，基于文件系统的缓存</li>\n<li>完全内存（RAM）支持的缓存</li>\n</ul>\n<p>&emsp;&emsp;cache server默认使用cache_fs即文件系统缓存模式，适用于大多数的应用程序。RAM缓存模式提供最佳性能，但Server需要足够的物理RAM用于缓存，通常需要的内存大小至少为项目Library文件夹的2-3倍。</p>\n<p>&emsp;&emsp;两个模式的配置文件信息都在config/defalult.yml中进行配置。</p>\n<h2 id=\"cache-fs\"><a href=\"#cache-fs\" class=\"headerlink\" title=\"cache_fs\"></a>cache_fs</h2><p>&emsp;&emsp;一个简单且高效的文件系统缓存模式。</p>\n<p><strong>用法</strong></p>\n<p><code>--cache-module cache_fs</code></p>\n<p><strong>命令</strong></p>","keywords":null,"cover":null,"content":null,"text":"Cache Modules&emsp;&emsp;Unity-cache-server v6的缓存服务器支持两种缓存机制：cache_fs，基于文件系统的缓存完全内存（RAM）支持的缓存&emsp;&emsp;cache server默认使用cache_fs即文件系统缓存模式，适","link":"","raw":null,"photos":[],"categories":[{"name":"unity","slug":"unity","count":2,"path":"api/categories/unity.json"}],"tags":[{"name":"cacheserver","slug":"cacheserver","count":2,"path":"api/tags/cacheserver.json"}]}]}