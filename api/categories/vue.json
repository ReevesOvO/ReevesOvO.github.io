{"name":"Vue","slug":"Vue","count":1,"postlist":[{"title":"Vue动态组件","slug":"vue-dynamic-components","date":"2018-12-08T10:43:21.000Z","updated":"2018-12-09T14:58:04.048Z","comments":true,"path":"api/articles/vue-dynamic-components.json","excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;之前对Vue的了解很局限，感觉上和我实验室老师的Nodom框架很像，也可以说Nodom有一些借鉴Vue的地方，所以当时学习Vue也只是草草的入了个门，然后就从做demo开始学习。最近觉得自己用Vue好像到瓶颈期了，因为觉得Vue的教程是最好的资料，就准备认真的在过一遍Vue的教程。</p>\n<h4 id=\"动态组件-amp-异步组件\"><a href=\"#动态组件-amp-异步组件\" class=\"headerlink\" title=\"动态组件&amp;异步组件\"></a>动态组件&amp;异步组件</h4><p>&emsp;&emsp;由于项目的问题，要解决从服务端获取表单内容，来动态生成表单，这就有点触及我的知识盲区了。难道要一个一个页面写，这也太傻了吧。了解了之后大概可以分为三种可以使用的方法，动态组件、异步组件、JSX。JSX了解不多，就不深入了。异步组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&apos;async-example&apos;, function (resolve, reject) &#123;</span><br><span class=\"line\">  setTimeout(function () &#123;</span><br><span class=\"line\">    // 向 `resolve` 回调传递组件定义</span><br><span class=\"line\">    resolve(&#123;</span><br><span class=\"line\">      template: &apos;&lt;div&gt;I am async!&lt;/div&gt;&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过定义工厂函数来异步解析组件定义，只有组件在需要被渲染的时候才会触发这个工厂函数，而且Vue会将结果缓存起来供未来使用。不适用动态生成多个不同表单的应用场景。</p>\n<p>&emsp;&emsp;动态组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;使用Vue的is特性来决定要加载的组件，针对使用element-ui、iview等ui框架的话生成表单、验证等要方便的多。这样一来就可以定义一套格式规范，从服务端拿到这些数据然后根据type选择相应组件生成表单，只要把统一的样式定好，就基本可以实现动态生成组件了。以iview为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- html --&gt;</span><br><span class=\"line\">&lt;Form&gt;</span><br><span class=\"line\">   &lt;FormItem&gt;</span><br><span class=\"line\">      &lt;component :is=&quot;componentName&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">   &lt;/FormItem&gt;</span><br><span class=\"line\">&lt;/Form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// ts</span><br><span class=\"line\">public componentName: string = &apos;Input&apos;;</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;之前对Vue的了解很局限，感觉上和我实验室老师的Nodom框架很像，也可以说Nodom有一些借鉴Vue的地方，所以当时学习Vue也只是草草的入了个门，然后就从做demo开始学习。最近觉得自己用Vue好像到瓶颈期了，因为觉得Vue的教程是最好的资料，就准","link":"","raw":null,"photos":[],"categories":[{"name":"Vue","slug":"Vue","count":1,"path":"api/categories/Vue.json"}],"tags":[{"name":"components","slug":"components","count":1,"path":"api/tags/components.json"},{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"}]}]}回传给父组件</p>\n<p>&emsp;&emsp;2. 需要使用并修改父组件传递的数据并回传给父组件</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>&emsp;&emsp;如果我们将父组件prop的数据直接在input中进行了修改，vue在控制台中给出警告，栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// html</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;conponent-son :title=&quot;title&quot;&gt;&lt;/conponent-son&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        Vue.component(&apos;conponent-son&apos;, &#123;</span><br><span class=\"line\">            props: [&apos;title&apos;],</span><br><span class=\"line\">            template: `&lt;div&gt;</span><br><span class=\"line\">                &lt;input type=&quot;text&quot; v-model=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;/div&gt;`</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        const app = new Vue(&#123;</span><br><span class=\"line\">            el: &apos;#app&apos;,</span><br><span class=\"line\">            data() &#123;</span><br><span class=\"line\">                return &#123;</span><br><span class=\"line\">                    title: &apos;文章&apos;,</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted() &#123;</span><br><span class=\"line\">                // 模拟异步加载数据</span><br><span class=\"line\">                window.setTimeout(()=&gt;&#123;</span><br><span class=\"line\">                    this.title = &apos;文章&apos;;</span><br><span class=\"line\">                &#125;,100);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2018/09/02/5b8bb4fc4f1e6.png\" alt=\"错误\"></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2>","keywords":null,"cover":"https://i.loli.net/2018/09/02/5b8bb4fc4f1e6.png","content":null,"text":"介绍  &emsp;&emsp;官方说法叫单向数据流，意思是父级prop的更新会向下流动到子组件中，但是反过来是不行的。为的是防止子组件修改父组件的状态。但是实际开发中我们可能会遇到以下两种情况：&emsp;&emsp;1. 需要使用并修改父组件传递的数据，但不需要回传给父组件&","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"component","slug":"component","count":1,"path":"api/tags/component.json"},{"name":"单向流动","slug":"单向流动","count":1,"path":"api/tags/单向流动.json"}]},{"title":"Vue组件之间通信","slug":"vueconponentscommunity","date":"2018-08-05T09:56:29.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vueconponentscommunity.json","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&emsp;&emsp;之前在学校一直在用nodom框架进行开发，对vue的了解也仅仅局限于对比二者的区别，并没有很深入的去了解。而且nodom的用法和vue的比较相似，所以上手vue是比较快的，但是其中很多原理并不熟悉，所以想总结并分享一下学到的东西。  </p>\n<p>&emsp;&emsp;组件化是vue.js或者说现在的mvvm框架中一个重要的思想，也是前端发展的趋势，这其中组件间的通信又是vue数据驱动的灵魂所在。所以在这谈谈Vue2.x的组件通信，这一篇主要聊聊非Vuex的做法，下一篇文章再讲Vuex。Vue2.x已经废弃了$dispatch和$broadcast，nodom中还保留着broadcast的方法…  </p>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><h4 id=\"1-父子组件，父组件向子组件传递数据\"><a href=\"#1-父子组件，父组件向子组件传递数据\" class=\"headerlink\" title=\"1.父子组件，父组件向子组件传递数据\"></a>1.父子组件，父组件向子组件传递数据</h4><p>&emsp;&emsp;父组件向子组件传递数据时，这是比较简单也是比较常见的一种方式，我们首先看看props，prop的值有两种一种是使用数组和对象，静态数据比较简单，作为理解就使用数组为例了，先看下代码：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">      父组件</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">message</span>=<span class=\"string\">\"父亲给儿子说的话：xxxxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    Vue.component(<span class=\"string\">'child'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      props: [<span class=\"string\">'message'</span>],</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">      template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123; &#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      el: <span class=\"string\">'#app'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过在props中声明数据，在子组件中添加message并赋值进行传递，需要注意的是HTML不区分大小写，在dom模板中，驼峰命名的props名称要转为短横线分隔命名。  </p>\n<p>&emsp;&emsp;另外在实际开发中，很少会传递死的数据，大部分都是使用动态数据，此时我们需要使用v-bind指令来绑定父组件数据，当父组件数据发生变化时，也会传递给子组件，代码：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">      父组件数据</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMessage\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    child :message=\"parentMessage\"<span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    Vue.component(<span class=\"string\">'child'</span>,&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      props: [<span class=\"string\">'message'</span>],</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">      template: '<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>子组件收到的消息：&#123; &#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      data: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        parentMessage: <span class=\"string\">''</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;之前在学校一直在用nodom框架进行开发，对vue的了解也仅仅局限于对比二者的区别，并没有很深入的去了解。而且nodom的用法和vue的比较相似，所以上手vue是比较快的，但是其中很多原理并不熟悉，所以想总结并分享一下学到的东西。  &emsp;&em","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"VUE","slug":"VUE","count":1,"path":"api/tags/VUE.json"},{"name":"组件","slug":"组件","count":1,"path":"api/tags/组件.json"},{"name":"通信","slug":"通信","count":2,"path":"api/tags/通信.json"}]},{"title":"Vue实例生命周期","slug":"vuelifecyle","date":"2018-07-06T16:56:17.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vuelifecyle.json","excerpt":"<h2 id=\"Vue实例生命周期\"><a href=\"#Vue实例生命周期\" class=\"headerlink\" title=\"Vue实例生命周期\"></a>Vue实例生命周期</h2><p>&emsp;&emsp;先来上一张vue官网的生命周期图：  </p>\n<p><img src=\"https://i.loli.net/2018/09/08/5b9380089a9dc.png\" alt=\"生命周期\"></p>\n<p>一个vue实例在创建的时候会调用上面的钩子函数，vue的生命周期钩子函数有：  </p>\n<ul>\n<li><p>beforeCreate</p>\n</li>\n<li><p>created</p>\n</li>\n<li><p>beforeMount</p>\n</li>\n<li><p>mounted</p>\n</li>\n<li><p>beforeUpdate</p>\n</li>\n<li><p>updated</p>\n</li>\n<li><p>beforeDestroy</p>\n</li>\n<li><p>destroyed</p>\n</li>\n</ul>\n<p>&emsp;&emsp;下面来一一讲解vue的生命周期钩子函数：  </p>\n<p><strong>beforeCreate：</strong></p>\n<p>&emsp;&emsp;vue实例创建前，el、data、methods都还未生成。  </p>\n<p><strong>created：</strong></p>\n<p>&emsp;&emsp;vue实例创建完成，这一阶段进行<strong>事件初始化，同时观测数据</strong>。注意：此时el还是读不到。  </p>","keywords":null,"cover":"https://i.loli.net/2018/09/08/5b9380089a9dc.png","content":null,"text":"Vue实例生命周期&emsp;&emsp;先来上一张vue官网的生命周期图：   [Figure] 一个vue实例在创建的时候会调用上面的钩子函数，vue的生命周期钩子函数有：  beforeCreatecreatedbeforeMountmountedbeforeUpdateu","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"生命周期","slug":"生命周期","count":1,"path":"api/tags/生命周期.json"}]},{"title":"Vue slot(插槽)","slug":"vueslot","date":"2018-09-09T02:51:57.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vueslot.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;插槽是组件的一部分，当时做项目的时候使用到了插槽，并不是很懂，vue官网也没有说明的很清楚，只是说vue实现了一套内容分发的api，\\<slot>元素承载分发内容的出口。也就是说插槽是用来分发内容的。那就举个栗子说明一下：</slot></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\">   这是插槽内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// component-a html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\thello，word！</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面app中放了一个component-a组件，组件的内容是下面的，这样在浏览器中渲染出来的结果是什么呢？结果是只会渲染出组件中的内容。app中组件标签里的内容被抛弃了。我们在组件中加一下slot，会发现之前写在组件内的内容出来了，这就是插槽的作用，可以分发内容。意思就是如果不使用插槽，在组件标签内写的任何内容都是不会生效的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;component-a&gt;</span><br><span class=\"line\">            这是插槽内容</span><br><span class=\"line\">         &lt;/component-a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        Vue.component(&apos;component-a&apos;,&#123;</span><br><span class=\"line\">            template: `</span><br><span class=\"line\">            &lt;div&gt;hello,word!&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;</span><br><span class=\"line\">            `</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        const app = new Vue(&#123;</span><br><span class=\"line\">            el: &apos;#app&apos;,</span><br><span class=\"line\">            data() &#123;</span><br><span class=\"line\">                return &#123;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个插槽也叫单个插槽。</p>\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>&emsp;&emsp;具名插槽就是具有名字的插槽，在组件中给插槽取上名字，然后再组件标签内slot属性填上名字，它就会跟组件内的name一一对应。那么没有名字的就是默认插槽了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">        .border &#123;</span><br><span class=\"line\">            border: 1px solid #e7494b;</span><br><span class=\"line\">        &#125;s</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;component-a&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                默认插槽的内容</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;template slot=&quot;slota&quot;&gt;</span><br><span class=\"line\">                插槽a的内容</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">            &lt;template slot=&quot;slotb&quot;&gt;</span><br><span class=\"line\">                插槽b的内容</span><br><span class=\"line\">            &lt;/template&gt;</span><br><span class=\"line\">         &lt;/component-a&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        Vue.component(&apos;component-a&apos;,&#123;</span><br><span class=\"line\">            template: `</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">              &lt;h2&gt;具名插槽&lt;/h2&gt;</span><br><span class=\"line\">              &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">              &lt;div class=&quot;border&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;slota&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">              &lt;div class=&quot;border&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">              &lt;slot name=&quot;slotb&quot;&gt;&lt;/slot&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            `</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        const app = new Vue(&#123;</span><br><span class=\"line\">            el: &apos;#app&apos;,</span><br><span class=\"line\">            data() &#123;</span><br><span class=\"line\">                return &#123;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2>","keywords":null,"cover":null,"content":null,"text":"前言&emsp;&emsp;插槽是组件的一部分，当时做项目的时候使用到了插槽，并不是很懂，vue官网也没有说明的很清楚，只是说vue实现了一套内容分发的api，\\元素承载分发内容的出口。也就是说插槽是用来分发内容的。那就举个栗子说明一下：1<br>2<br>3<br>4<br>5","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"slot","slug":"slot","count":1,"path":"api/tags/slot.json"}]},{"title":"Vuex","slug":"vuex","date":"2018-08-19T07:30:47.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vuex.json","excerpt":"<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><p>&emsp;&emsp;官方说vuex是一个专为vue.js应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式</strong>存储管理应用的<strong>所有组件的状态</strong>，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>&emsp;&emsp;按我的理解就是，Vuex也是用来管理组建之间通信的。组件之间都是独立的，组件之间想实现通信，就要用到之前的文章提到的props选项，自定义事件，以及eventbus，前两种只适用于父子关系，eventbus可以适用所有的组件通信。但是据说不是很推荐，我想可能的原因是在大型项目中，到处引用一个eventbus代码可读性差、可能会命名冲突等，以及数据并不好进行管理。而Vuex就是解决这样的问题的，将组件需要共享的数据提出来，在一定的规则下管理这些数据，在大型项目中看起来就会仅仅有条。当然我也说了，是<strong>大型项目</strong>，一般的小项目还是用前三种方式去做吧，不要为了用vuex而用。</p>\n<h2 id=\"使用Vuex\"><a href=\"#使用Vuex\" class=\"headerlink\" title=\"使用Vuex\"></a>使用Vuex</h2><p>&emsp;&emsp;先创建一个实例，了解一下vuex：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vuex<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/vuex/3.0.1/vuex.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    Vue.use(Vuex);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 存放组件之间共享的数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">        state: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            name: <span class=\"string\">'myName'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 显示更改state里的数据</span></span></span><br><span class=\"line\"><span class=\"undefined\">        mutations: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 获取数据的方法</span></span></span><br><span class=\"line\"><span class=\"undefined\">        getters: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 类似mutation，不是直接变更状态，而是提交mutation，还可以包含异步操作</span></span></span><br><span class=\"line\"><span class=\"undefined\">        actions: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">new</span> Vue (&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                name: <span class=\"string\">'null'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        store,</span></span><br><span class=\"line\"><span class=\"undefined\">        mounted() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$store);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125; </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在创建vue实例前需使用vuex，也就是Vue.use(Vuex)，使用Vuex.Store({})方法创建一个仓库，当Vue组件从store中读取state选项也就是状态，如果store中状态发生更新时，它会及时响应将数据发给其它组件，如果要直接改变store的状态，就使用使用mutations进行显式的更改。另外四个核心选项在代码中已经注释说明了。我们在控制台中打印了$store，来看看有哪些东西：</p>\n<p><img src=\"https://i.loli.net/2018/08/19/5b797da78e02d.png\" alt=\"store\"></p>\n<p>&emsp;&emsp;一般情况下会在组件的计算属性中来获取state的数据，原因是计算属性会监控数据变化，数据改变就会响应。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在上面代码的html中加一个helloword的标签，在注册一个helloword的组件。就可以到浏览器中看到效果了。</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'helloword'</span>,&#123;</span><br><span class=\"line\">        template:<span class=\"string\">\"&lt;div&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;\"</span>,</span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\">            name() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.name</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">         mounted() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"https://i.loli.net/2018/08/19/5b797da78e02d.png","content":null,"text":"Vuex&emsp;&emsp;官方说vuex是一个专为vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&emsp;&emsp;按我的理解就是，Vuex也是用来管理组建之间通信的。组件之间都是独立","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"通信","slug":"通信","count":2,"path":"api/tags/通信.json"},{"name":"vuex","slug":"vuex","count":1,"path":"api/tags/vuex.json"}]},{"title":"双向绑定","slug":"vuedoublesidedbind","date":"2018-08-26T02:24:55.000Z","updated":"2018-10-02T15:01:49.429Z","comments":true,"path":"api/articles/vuedoublesidedbind.json","excerpt":"<h2 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h2><p>&emsp;&emsp;数据的双向绑定可以说是MVVM框架的核心思想，MVVM框架包括三个部分，Model、View和ViewModel，分别指数据、视图、ViewModel可以说是前二者的连接者，二者通过它实现数据的双向绑定。以Vue为例，先看下Vue官网数据绑定的示意图：</p>\n<p><img src=\"https://i.loli.net/2018/08/26/5b827f69c1a85.png\" alt=\"数据绑定\"></p>\n<p>&emsp;&emsp;<em>这张图想表达的是，对象a下的属性b定义了getter、setter对属性进行劫持，当属性值改变时就会notify通知watch对象，而watch对象则会notify到view更新。反之，在视图改变数据时，也会触发订阅者watch，更新数据到data中。这样的model能实时响应view上的数据变化，view实时响应model的数据变化，这样的一个过程就叫数据的双向绑定。</em></p>\n<p>&emsp;&emsp;Vue是通过ES5中Object.defineProperty()这个方法来实现getter、setter对数据进行劫持，所以要运行Vue的运行环境需支持ES5。</p>\n<h2 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a>Object.defineProperty()</h2><p>&emsp;&emsp;这是一个ES5的方法，可以在一个对象上定义一个新属性或用来修改一个已经存在的属性，并返回该对象。目前对象的属性描述符有两种主要形式：此数据描述符和存取描述符。</p>\n<p>&emsp;&emsp;<em>数据描述符是一个拥有一个可写或不可写值的属性</em></p>\n<p>&emsp;&emsp;<em>存取描述符是由一对getter-setter函数功能来描述的属性</em></p>\n<p>&emsp;&emsp;描述符只能是以上两种之一，不可能同时拥有这两种。描述符属性包括：configurable(可配置性，这又为true时才能设置)、Writable(是否可写)、Enumerable(是否可枚举)、get(给属性提供getter)、setter(给属性提供setter)。看下这个例子：</p>","keywords":null,"cover":"https://i.loli.net/2018/08/26/5b827f69c1a85.png","content":null,"text":"双向绑定&emsp;&emsp;数据的双向绑定可以说是MVVM框架的核心思想，MVVM框架包括三个部分，Model、View和ViewModel，分别指数据、视图、ViewModel可以说是前二者的连接者，二者通过它实现数据的双向绑定。以Vue为例，先看下Vue官网数据绑定的示意","link":"","raw":null,"photos":[],"categories":[{"name":"vue","slug":"vue","count":7,"path":"api/categories/vue.json"}],"tags":[{"name":"双向绑定","slug":"双向绑定","count":1,"path":"api/tags/双向绑定.json"}]}]}